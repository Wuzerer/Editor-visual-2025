# Editor Commands - Comandos del Editor Visual
# Este archivo usa un enfoque completamente diferente para evitar reinicios

init python:
    import os
    import json
    import shutil
    from datetime import datetime
    
    # Configuraci√≥n del sistema
    PROJECTS_DIR = os.path.join(config.gamedir, "projects")
    CURRENT_SCENES_FILE = os.path.join(config.gamedir, "current_scenes.rpy")
    SCENES_DIR = os.path.join(config.gamedir, "scenes")
    
    # Asegurar que los directorios existen
    if not os.path.exists(PROJECTS_DIR):
        os.makedirs(PROJECTS_DIR)
    if not os.path.exists(SCENES_DIR):
        os.makedirs(SCENES_DIR)
    
    # ===== FUNCIONES B√ÅSICAS DE ARCHIVO =====
    
    def clear_file_basic():
        """Limpia el archivo RPY de forma b√°sica"""
        try:
            if os.path.exists(CURRENT_SCENES_FILE):
                empty_content = "# current_scenes.rpy\n# Archivo vac√≠o\n"
                with open(CURRENT_SCENES_FILE, 'w', encoding='utf-8') as f:
                    f.write(empty_content)
                renpy.notify("üóëÔ∏è Archivo RPY limpiado")
            else:
                renpy.notify("üìù Archivo RPY no existe")
        except Exception as e:
            renpy.notify(f"‚ùå Error: {str(e)}")
    
    def initialize_basic():
        """Inicializa el sistema de forma b√°sica"""
        try:
            if os.path.exists(CURRENT_SCENES_FILE):
                with open(CURRENT_SCENES_FILE, 'r', encoding='utf-8') as f:
                    scenes = json.load(f)
                renpy.notify(f"‚úÖ Sistema: {len(scenes)} escenas")
            else:
                renpy.notify("‚úÖ Sistema: archivo vac√≠o")
        except Exception as e:
            renpy.notify(f"‚ùå Error: {str(e)}")
    
    def add_test_basic():
        """Agrega escena de prueba de forma b√°sica al archivo RPY"""
        try:
            # Crear contenido RPY de ejemplo
            rpy_content = """# current_scenes.rpy
# Archivo generado autom√°ticamente por el Editor Visual
# Generado el: {datetime}

# Escena 1: Di√°logo
label scene_1_dialogue:
    eileen "¬°Hola! Esta es una escena de prueba generada autom√°ticamente."
    return

# Escena 2: Di√°logo del narrador
label scene_2_dialogue:
    "El sistema est√° funcionando correctamente."
    return

# Escena 3: Fondo
label scene_3_background:
    scene bg room with dissolve
    return
""".format(datetime=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            
            # Guardar el archivo RPY
            with open(CURRENT_SCENES_FILE, 'w', encoding='utf-8') as f:
                f.write(rpy_content)
            
            renpy.notify("‚úÖ Archivo RPY de prueba creado exitosamente")
        except Exception as e:
            renpy.notify(f"‚ùå Error: {str(e)}")
    
    def check_files_basic():
        """Verifica archivos RPY de forma b√°sica"""
        try:
            if os.path.exists(CURRENT_SCENES_FILE):
                with open(CURRENT_SCENES_FILE, 'r', encoding='utf-8') as f:
                    content = f.read()
                # Contar las l√≠neas de label para estimar el n√∫mero de escenas
                label_count = content.count('label ')
                renpy.notify(f"üìÅ Archivo RPY: {label_count} escenas encontradas")
            else:
                renpy.notify("üìÅ Archivo RPY: no existe")
        except Exception as e:
            renpy.notify(f"‚ùå Error: {str(e)}")
    
    def diagnostic_basic():
        """Diagn√≥stico b√°sico"""
        try:
            renpy.notify("üîç DIAGN√ìSTICO B√ÅSICO")
            
            # Verificar archivo
            if os.path.exists(CURRENT_SCENES_FILE):
                with open(CURRENT_SCENES_FILE, 'r', encoding='utf-8') as f:
                    scenes = json.load(f)
                renpy.notify(f"‚úÖ Archivo: {len(scenes)} escenas")
            else:
                renpy.notify("‚ùå Archivo: no existe")
            
            # Verificar directorio
            if os.path.exists(PROJECTS_DIR):
                renpy.notify("‚úÖ Directorio: existe")
            else:
                renpy.notify("‚ùå Directorio: no existe")
        except Exception as e:
            renpy.notify(f"‚ùå Error: {str(e)}")
    
    def test_flow_basic():
        """Prueba flujo b√°sico"""
        try:
            renpy.notify("üß™ FLUJO B√ÅSICO")
            
            # Limpiar
            clear_file_basic()
            
            # Agregar
            add_test_basic()
            
            renpy.notify("‚úÖ Flujo completado")
        except Exception as e:
            renpy.notify(f"‚ùå Error: {str(e)}")
    
    def sync_screen_basic():
        """Sincroniza la pantalla con el archivo de forma b√°sica"""
        try:
            if os.path.exists(CURRENT_SCENES_FILE):
                with open(CURRENT_SCENES_FILE, 'r', encoding='utf-8') as f:
                    scenes = json.load(f)
                
                # Actualizar la pantalla
                renpy.set_screen_variable("current_scene", scenes)
                renpy.notify(f"üîÑ Pantalla actualizada: {len(scenes)} escenas")
            else:
                renpy.notify("üìù No hay archivo para sincronizar")
        except Exception as e:
            renpy.notify(f"‚ùå Error al sincronizar: {str(e)}")
